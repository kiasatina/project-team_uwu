scalar DateTime
scalar Upload

"Types of layer effects for videos"
enum PostLayerEnum {
    FILTER
    TEXT
    STICKER
}

"A static file which was uploaded at some point"
type File {
    src: String!
    type: String!
}

"The user of the platform"
type User {
    _id: ID!
    bio: String!
    email: String!
    username: String!
    profile_image: File
    followers_count: Int!
    followers(limit: Int = 10, page: Int = 0): [User]!
    following_count: Int!
    following(limit: Int = 10, page: Int = 0): [User]!
    posts_count: Int!
    posts(draft: Boolean, limit: Int = 10, page: Int = 0): [Post]!
    createdAt: DateTime!
}

"The livestream of the platform (TTL of 1 hour)"
type Livestream {
    _id: ID!
    user: User!
    live: Boolean!
    title: String!
    viewers: Int!
    updatedAt: DateTime!
    createdAt: DateTime!

}

"The geolocation information of a post"
type PostLocation {
    lat: Float
    long: Float
    place: String
}

"The sticker asset of a post"
type Sticker {
    href: String
    asset: File
}

"The positioning of a layer in a post"
type PostLayerPosition {
    x: Float!
    y: Float!
}

"The filter/decoration layer of a post"
type PostLayer {
    type: PostLayerEnum!
    filter: String
    sticker: Sticker
    position: PostLayerPosition
    text: String
}

"PostLayerPosition but for inputs"
input PostLayerPositionInput {
    x: Float!
    y: Float!
}

"PostLayer sticker for inputs"
input PostLayerStickerInput {
    asset: Upload
    href: String
}

"PostLayer but for inputs"
input PostLayerInput {
    type: PostLayerEnum!
    filter: String
    sticker: PostLayerStickerInput
    position: PostLayerPositionInput
    text: String
}

"Post location for inputs"
input PostLocationInput {
    lat: Float!
    long: Float!
    place: String!
}

"A post from some user"
type Post {
    _id: ID!
    user: User!
    asset: File!
    title: String!
    description: String!
    draft: Boolean!
    location: PostLocation
    audio: File
    layers: [PostLayer]!
    updatedAt: DateTime!
    createdAt: DateTime!
}

type Query {
    "Fetches information about the followers of a user"
    getFollowers(following: ID, limit: Int = 10, page: Int = 0): [User]!
    "Fetches information about users a user follows"
    getFollowing(follower: ID, limit: Int = 10, page: Int = 0): [User]!
    "Fetches information about livestreams"
    getLivestreams(
        _id: ID
        user: ID
        live: Boolean
        updatedAt: DateTime
        limit: Int = 10
        page: Int = 0
    ): [Livestream]!
    "Fetches user information of current session user"
    getMe: User!
    "Fetches nformation about a post, or list from a user"
    getPosts(
        _id: ID
        user: ID
        draft: Boolean = false
        limit: Int = 10
        page: Int = 0
    ): [Post]!
    "Fetches information about users or a specific user"
    getUsers(_id: ID, username: String, limit: Int = 10, page: Int = 0): [User]!
    "Testing stuff"
    test: String!
}

type Mutation {
    "Start a livestream session"
    createLivestream(title: String!): Livestream!
    "Create a post"
    createPost(asset: Upload!, title: String!, description: String!): Post!
    "Updates a post"
    updatePost(
        _id: ID!
        draft: Boolean
        title: String
        description: String
        location: PostLocationInput
        layers: [PostLayerInput]
    ): Post!
    "Follow a user"
    follow(_id: ID!): Boolean!
    "Unfollow a user"
    unfollow(_id: ID!): Boolean!
    "Logins in user, returning a JWT token for authorization"
    login(email: String!, password: String!): String!
    "Register's user, returning a JWT token for authorization"
    register(email: String!, username: String!, password: String!): String!
    "Updates the profile information of user in session"
    updateProfile(
        profile_image: Upload
        username: String
        "Required only if password is provided"
        new_password: String
        password: String
        bio: String
    ): User!
    "Testing stuff"
    test(file: Upload!): File!
}
